syntax = "proto3";
package milvus.proto.plan;

option go_package = "github.com/milvus-io/milvus/internal/proto/planpb";
import "schema.proto";

enum UnaryLogicalOp {
  InvalidUnaryLogicalOp = 0;
  Not = 1;
};

enum BinaryLogicalOp {
  InvalidBinaryLogicalOp = 0;
  LogicalAnd = 1;
  LogicalOr = 2;
}

enum CompareOp {
  InvalidCompareOp = 0;
  GreaterThan = 1;
  GreaterEqual = 2;
  LessThan = 3;
  LessEqual = 4;
  Equal = 5;
  NotEqual = 6;
};

enum UnaryArithOp {
  InvalidUnaryArithOp = 0;
  Minus = 1;
  BitNot = 2;
}

enum BinaryArithOp {
  InvalidBinaryArithOp = 0;
  Add = 1;
  Subtract = 2;
  Multiply = 3;
  Divide = 4;
  Power = 6;
  BitAnd = 7;
  BitOr = 8;
  BitXor = 9;
}

message GenericValue {
  oneof val {
    bool bool_val = 1;
    int64 int64_val = 2;
    double float_val = 3;
  };
}

message QueryInfo {
  int64 topk = 1;
  string metric_type = 3;
  string search_params = 4;
}

message ColumnInfo {
  int64 field_id = 1;
  schema.DataType data_type = 2;
  bool is_primary_key = 3;
  bool is_autoID = 4;
}

message ValueExpr {
  GenericValue value = 1;
}

message ColumnExpr {
  ColumnInfo column_info = 1;
}

message CastExpr {
  Expr child = 1;
  schema.DataType data_type = 2;
}

message UnaryArithExpr {
  Expr child = 1;
  UnaryArithOp op = 2;
}

message BinaryArithExpr {
  Expr left = 1;
  Expr right = 2;
  BinaryArithOp op = 3;
}

message UnaryRangeExpr {
  Expr child = 1;
  CompareOp op = 2;
  GenericValue value = 3;
}

message BinaryRangeExpr {
  Expr child = 1;
  bool lower_inclusive = 2;
  bool upper_inclusive = 3;
  GenericValue lower_value = 4;
  GenericValue upper_value = 5;
}

message CompareExpr {
  Expr left = 1;
  Expr right = 2;
  CompareOp op = 3;
}

message TermExpr {
  Expr child = 1;
  repeated GenericValue values = 2;
}

message UnaryLogicalExpr {
  Expr child = 1;
  UnaryLogicalOp op = 2;
}

message BinaryLogicalExpr {
  Expr left = 1;
  Expr right = 2;
  BinaryLogicalOp op = 3;
}

message Expr {
  oneof expr {
    TermExpr term_expr = 1;
    CompareExpr compare_expr = 2;
    UnaryLogicalExpr unary_logical_expr = 3;
    BinaryLogicalExpr binary_logical_expr = 4;
    UnaryRangeExpr unary_range_expr = 5;
    BinaryRangeExpr binary_range_expr = 6;
    UnaryArithExpr unary_arith_expr = 7;
    BinaryArithExpr binary_arith_expr = 8;
    ValueExpr value_expr = 9;
    ColumnExpr column_expr = 10;
    CastExpr cast_expr = 11;
  };
}

message VectorANNS {
  bool is_binary = 1;
  int64 field_id = 2;
  Expr predicates = 3;
  QueryInfo query_info = 4;
  string placeholder_tag = 5;  // always be "$0"
}

message PlanNode {
  oneof node {
    VectorANNS vector_anns = 1;
  }
  repeated int64 output_field_ids = 2;
}