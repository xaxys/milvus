// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plan.proto

package planpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	schemapb "github.com/milvus-io/milvus/internal/proto/schemapb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UnaryLogicalOp int32

const (
	UnaryLogicalOp_InvalidUnaryLogicalOp UnaryLogicalOp = 0
	UnaryLogicalOp_Not                   UnaryLogicalOp = 1
)

var UnaryLogicalOp_name = map[int32]string{
	0: "InvalidUnaryLogicalOp",
	1: "Not",
}

var UnaryLogicalOp_value = map[string]int32{
	"InvalidUnaryLogicalOp": 0,
	"Not":                   1,
}

func (x UnaryLogicalOp) String() string {
	return proto.EnumName(UnaryLogicalOp_name, int32(x))
}

func (UnaryLogicalOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{0}
}

type BinaryLogicalOp int32

const (
	BinaryLogicalOp_InvalidBinaryLogicalOp BinaryLogicalOp = 0
	BinaryLogicalOp_LogicalAnd             BinaryLogicalOp = 1
	BinaryLogicalOp_LogicalOr              BinaryLogicalOp = 2
)

var BinaryLogicalOp_name = map[int32]string{
	0: "InvalidBinaryLogicalOp",
	1: "LogicalAnd",
	2: "LogicalOr",
}

var BinaryLogicalOp_value = map[string]int32{
	"InvalidBinaryLogicalOp": 0,
	"LogicalAnd":             1,
	"LogicalOr":              2,
}

func (x BinaryLogicalOp) String() string {
	return proto.EnumName(BinaryLogicalOp_name, int32(x))
}

func (BinaryLogicalOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{1}
}

type CompareOp int32

const (
	CompareOp_InvalidCompareOp CompareOp = 0
	CompareOp_GreaterThan      CompareOp = 1
	CompareOp_GreaterEqual     CompareOp = 2
	CompareOp_LessThan         CompareOp = 3
	CompareOp_LessEqual        CompareOp = 4
	CompareOp_Equal            CompareOp = 5
	CompareOp_NotEqual         CompareOp = 6
)

var CompareOp_name = map[int32]string{
	0: "InvalidCompareOp",
	1: "GreaterThan",
	2: "GreaterEqual",
	3: "LessThan",
	4: "LessEqual",
	5: "Equal",
	6: "NotEqual",
}

var CompareOp_value = map[string]int32{
	"InvalidCompareOp": 0,
	"GreaterThan":      1,
	"GreaterEqual":     2,
	"LessThan":         3,
	"LessEqual":        4,
	"Equal":            5,
	"NotEqual":         6,
}

func (x CompareOp) String() string {
	return proto.EnumName(CompareOp_name, int32(x))
}

func (CompareOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{2}
}

type UnaryArithOp int32

const (
	UnaryArithOp_InvalidUnaryArithOp UnaryArithOp = 0
	UnaryArithOp_Minus               UnaryArithOp = 1
	UnaryArithOp_BitNot              UnaryArithOp = 2
)

var UnaryArithOp_name = map[int32]string{
	0: "InvalidUnaryArithOp",
	1: "Minus",
	2: "BitNot",
}

var UnaryArithOp_value = map[string]int32{
	"InvalidUnaryArithOp": 0,
	"Minus":               1,
	"BitNot":              2,
}

func (x UnaryArithOp) String() string {
	return proto.EnumName(UnaryArithOp_name, int32(x))
}

func (UnaryArithOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{3}
}

type BinaryArithOp int32

const (
	BinaryArithOp_InvalidBinaryArithOp BinaryArithOp = 0
	BinaryArithOp_Add                  BinaryArithOp = 1
	BinaryArithOp_Subtract             BinaryArithOp = 2
	BinaryArithOp_Multiply             BinaryArithOp = 3
	BinaryArithOp_Divide               BinaryArithOp = 4
	BinaryArithOp_Modulo               BinaryArithOp = 5
	BinaryArithOp_Power                BinaryArithOp = 6
	BinaryArithOp_BitAnd               BinaryArithOp = 7
	BinaryArithOp_BitOr                BinaryArithOp = 8
	BinaryArithOp_BitXor               BinaryArithOp = 9
	BinaryArithOp_ShiftLeft            BinaryArithOp = 10
	BinaryArithOp_ShiftRight           BinaryArithOp = 11
)

var BinaryArithOp_name = map[int32]string{
	0:  "InvalidBinaryArithOp",
	1:  "Add",
	2:  "Subtract",
	3:  "Multiply",
	4:  "Divide",
	5:  "Modulo",
	6:  "Power",
	7:  "BitAnd",
	8:  "BitOr",
	9:  "BitXor",
	10: "ShiftLeft",
	11: "ShiftRight",
}

var BinaryArithOp_value = map[string]int32{
	"InvalidBinaryArithOp": 0,
	"Add":                  1,
	"Subtract":             2,
	"Multiply":             3,
	"Divide":               4,
	"Modulo":               5,
	"Power":                6,
	"BitAnd":               7,
	"BitOr":                8,
	"BitXor":               9,
	"ShiftLeft":            10,
	"ShiftRight":           11,
}

func (x BinaryArithOp) String() string {
	return proto.EnumName(BinaryArithOp_name, int32(x))
}

func (BinaryArithOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{4}
}

type GenericValue struct {
	// Types that are valid to be assigned to Val:
	//	*GenericValue_BoolVal
	//	*GenericValue_Int64Val
	//	*GenericValue_FloatVal
	Val                  isGenericValue_Val `protobuf_oneof:"val"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GenericValue) Reset()         { *m = GenericValue{} }
func (m *GenericValue) String() string { return proto.CompactTextString(m) }
func (*GenericValue) ProtoMessage()    {}
func (*GenericValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{0}
}

func (m *GenericValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericValue.Unmarshal(m, b)
}
func (m *GenericValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericValue.Marshal(b, m, deterministic)
}
func (m *GenericValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericValue.Merge(m, src)
}
func (m *GenericValue) XXX_Size() int {
	return xxx_messageInfo_GenericValue.Size(m)
}
func (m *GenericValue) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericValue.DiscardUnknown(m)
}

var xxx_messageInfo_GenericValue proto.InternalMessageInfo

type isGenericValue_Val interface {
	isGenericValue_Val()
}

type GenericValue_BoolVal struct {
	BoolVal bool `protobuf:"varint,1,opt,name=bool_val,json=boolVal,proto3,oneof"`
}

type GenericValue_Int64Val struct {
	Int64Val int64 `protobuf:"varint,2,opt,name=int64_val,json=int64Val,proto3,oneof"`
}

type GenericValue_FloatVal struct {
	FloatVal float64 `protobuf:"fixed64,3,opt,name=float_val,json=floatVal,proto3,oneof"`
}

func (*GenericValue_BoolVal) isGenericValue_Val() {}

func (*GenericValue_Int64Val) isGenericValue_Val() {}

func (*GenericValue_FloatVal) isGenericValue_Val() {}

func (m *GenericValue) GetVal() isGenericValue_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *GenericValue) GetBoolVal() bool {
	if x, ok := m.GetVal().(*GenericValue_BoolVal); ok {
		return x.BoolVal
	}
	return false
}

func (m *GenericValue) GetInt64Val() int64 {
	if x, ok := m.GetVal().(*GenericValue_Int64Val); ok {
		return x.Int64Val
	}
	return 0
}

func (m *GenericValue) GetFloatVal() float64 {
	if x, ok := m.GetVal().(*GenericValue_FloatVal); ok {
		return x.FloatVal
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GenericValue) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GenericValue_BoolVal)(nil),
		(*GenericValue_Int64Val)(nil),
		(*GenericValue_FloatVal)(nil),
	}
}

type QueryInfo struct {
	Topk                 int64    `protobuf:"varint,1,opt,name=topk,proto3" json:"topk,omitempty"`
	MetricType           string   `protobuf:"bytes,3,opt,name=metric_type,json=metricType,proto3" json:"metric_type,omitempty"`
	SearchParams         string   `protobuf:"bytes,4,opt,name=search_params,json=searchParams,proto3" json:"search_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryInfo) Reset()         { *m = QueryInfo{} }
func (m *QueryInfo) String() string { return proto.CompactTextString(m) }
func (*QueryInfo) ProtoMessage()    {}
func (*QueryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{1}
}

func (m *QueryInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryInfo.Unmarshal(m, b)
}
func (m *QueryInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryInfo.Marshal(b, m, deterministic)
}
func (m *QueryInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInfo.Merge(m, src)
}
func (m *QueryInfo) XXX_Size() int {
	return xxx_messageInfo_QueryInfo.Size(m)
}
func (m *QueryInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInfo proto.InternalMessageInfo

func (m *QueryInfo) GetTopk() int64 {
	if m != nil {
		return m.Topk
	}
	return 0
}

func (m *QueryInfo) GetMetricType() string {
	if m != nil {
		return m.MetricType
	}
	return ""
}

func (m *QueryInfo) GetSearchParams() string {
	if m != nil {
		return m.SearchParams
	}
	return ""
}

type ColumnInfo struct {
	FieldId              int64             `protobuf:"varint,1,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	DataType             schemapb.DataType `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3,enum=milvus.proto.schema.DataType" json:"data_type,omitempty"`
	IsPrimaryKey         bool              `protobuf:"varint,3,opt,name=is_primary_key,json=isPrimaryKey,proto3" json:"is_primary_key,omitempty"`
	IsAutoID             bool              `protobuf:"varint,4,opt,name=is_autoID,json=isAutoID,proto3" json:"is_autoID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ColumnInfo) Reset()         { *m = ColumnInfo{} }
func (m *ColumnInfo) String() string { return proto.CompactTextString(m) }
func (*ColumnInfo) ProtoMessage()    {}
func (*ColumnInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{2}
}

func (m *ColumnInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ColumnInfo.Unmarshal(m, b)
}
func (m *ColumnInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ColumnInfo.Marshal(b, m, deterministic)
}
func (m *ColumnInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnInfo.Merge(m, src)
}
func (m *ColumnInfo) XXX_Size() int {
	return xxx_messageInfo_ColumnInfo.Size(m)
}
func (m *ColumnInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnInfo proto.InternalMessageInfo

func (m *ColumnInfo) GetFieldId() int64 {
	if m != nil {
		return m.FieldId
	}
	return 0
}

func (m *ColumnInfo) GetDataType() schemapb.DataType {
	if m != nil {
		return m.DataType
	}
	return schemapb.DataType_None
}

func (m *ColumnInfo) GetIsPrimaryKey() bool {
	if m != nil {
		return m.IsPrimaryKey
	}
	return false
}

func (m *ColumnInfo) GetIsAutoID() bool {
	if m != nil {
		return m.IsAutoID
	}
	return false
}

type ValueExpr struct {
	Value                *GenericValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ValueExpr) Reset()         { *m = ValueExpr{} }
func (m *ValueExpr) String() string { return proto.CompactTextString(m) }
func (*ValueExpr) ProtoMessage()    {}
func (*ValueExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{3}
}

func (m *ValueExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValueExpr.Unmarshal(m, b)
}
func (m *ValueExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValueExpr.Marshal(b, m, deterministic)
}
func (m *ValueExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueExpr.Merge(m, src)
}
func (m *ValueExpr) XXX_Size() int {
	return xxx_messageInfo_ValueExpr.Size(m)
}
func (m *ValueExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueExpr.DiscardUnknown(m)
}

var xxx_messageInfo_ValueExpr proto.InternalMessageInfo

func (m *ValueExpr) GetValue() *GenericValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type ColumnExpr struct {
	ColumnInfo           *ColumnInfo `protobuf:"bytes,1,opt,name=column_info,json=columnInfo,proto3" json:"column_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ColumnExpr) Reset()         { *m = ColumnExpr{} }
func (m *ColumnExpr) String() string { return proto.CompactTextString(m) }
func (*ColumnExpr) ProtoMessage()    {}
func (*ColumnExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{4}
}

func (m *ColumnExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ColumnExpr.Unmarshal(m, b)
}
func (m *ColumnExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ColumnExpr.Marshal(b, m, deterministic)
}
func (m *ColumnExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnExpr.Merge(m, src)
}
func (m *ColumnExpr) XXX_Size() int {
	return xxx_messageInfo_ColumnExpr.Size(m)
}
func (m *ColumnExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnExpr.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnExpr proto.InternalMessageInfo

func (m *ColumnExpr) GetColumnInfo() *ColumnInfo {
	if m != nil {
		return m.ColumnInfo
	}
	return nil
}

type CastExpr struct {
	Child                *Expr             `protobuf:"bytes,1,opt,name=child,proto3" json:"child,omitempty"`
	DataType             schemapb.DataType `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3,enum=milvus.proto.schema.DataType" json:"data_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CastExpr) Reset()         { *m = CastExpr{} }
func (m *CastExpr) String() string { return proto.CompactTextString(m) }
func (*CastExpr) ProtoMessage()    {}
func (*CastExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{5}
}

func (m *CastExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CastExpr.Unmarshal(m, b)
}
func (m *CastExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CastExpr.Marshal(b, m, deterministic)
}
func (m *CastExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CastExpr.Merge(m, src)
}
func (m *CastExpr) XXX_Size() int {
	return xxx_messageInfo_CastExpr.Size(m)
}
func (m *CastExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_CastExpr.DiscardUnknown(m)
}

var xxx_messageInfo_CastExpr proto.InternalMessageInfo

func (m *CastExpr) GetChild() *Expr {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *CastExpr) GetDataType() schemapb.DataType {
	if m != nil {
		return m.DataType
	}
	return schemapb.DataType_None
}

type UnaryArithExpr struct {
	Child                *Expr        `protobuf:"bytes,1,opt,name=child,proto3" json:"child,omitempty"`
	Op                   UnaryArithOp `protobuf:"varint,2,opt,name=op,proto3,enum=milvus.proto.plan.UnaryArithOp" json:"op,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UnaryArithExpr) Reset()         { *m = UnaryArithExpr{} }
func (m *UnaryArithExpr) String() string { return proto.CompactTextString(m) }
func (*UnaryArithExpr) ProtoMessage()    {}
func (*UnaryArithExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{6}
}

func (m *UnaryArithExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnaryArithExpr.Unmarshal(m, b)
}
func (m *UnaryArithExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnaryArithExpr.Marshal(b, m, deterministic)
}
func (m *UnaryArithExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnaryArithExpr.Merge(m, src)
}
func (m *UnaryArithExpr) XXX_Size() int {
	return xxx_messageInfo_UnaryArithExpr.Size(m)
}
func (m *UnaryArithExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_UnaryArithExpr.DiscardUnknown(m)
}

var xxx_messageInfo_UnaryArithExpr proto.InternalMessageInfo

func (m *UnaryArithExpr) GetChild() *Expr {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *UnaryArithExpr) GetOp() UnaryArithOp {
	if m != nil {
		return m.Op
	}
	return UnaryArithOp_InvalidUnaryArithOp
}

type BinaryArithExpr struct {
	Left                 *Expr         `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right                *Expr         `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
	Op                   BinaryArithOp `protobuf:"varint,3,opt,name=op,proto3,enum=milvus.proto.plan.BinaryArithOp" json:"op,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *BinaryArithExpr) Reset()         { *m = BinaryArithExpr{} }
func (m *BinaryArithExpr) String() string { return proto.CompactTextString(m) }
func (*BinaryArithExpr) ProtoMessage()    {}
func (*BinaryArithExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{7}
}

func (m *BinaryArithExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BinaryArithExpr.Unmarshal(m, b)
}
func (m *BinaryArithExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BinaryArithExpr.Marshal(b, m, deterministic)
}
func (m *BinaryArithExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinaryArithExpr.Merge(m, src)
}
func (m *BinaryArithExpr) XXX_Size() int {
	return xxx_messageInfo_BinaryArithExpr.Size(m)
}
func (m *BinaryArithExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_BinaryArithExpr.DiscardUnknown(m)
}

var xxx_messageInfo_BinaryArithExpr proto.InternalMessageInfo

func (m *BinaryArithExpr) GetLeft() *Expr {
	if m != nil {
		return m.Left
	}
	return nil
}

func (m *BinaryArithExpr) GetRight() *Expr {
	if m != nil {
		return m.Right
	}
	return nil
}

func (m *BinaryArithExpr) GetOp() BinaryArithOp {
	if m != nil {
		return m.Op
	}
	return BinaryArithOp_InvalidBinaryArithOp
}

type UnaryRangeExpr struct {
	Child                *Expr         `protobuf:"bytes,1,opt,name=child,proto3" json:"child,omitempty"`
	Op                   CompareOp     `protobuf:"varint,2,opt,name=op,proto3,enum=milvus.proto.plan.CompareOp" json:"op,omitempty"`
	Value                *GenericValue `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UnaryRangeExpr) Reset()         { *m = UnaryRangeExpr{} }
func (m *UnaryRangeExpr) String() string { return proto.CompactTextString(m) }
func (*UnaryRangeExpr) ProtoMessage()    {}
func (*UnaryRangeExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{8}
}

func (m *UnaryRangeExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnaryRangeExpr.Unmarshal(m, b)
}
func (m *UnaryRangeExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnaryRangeExpr.Marshal(b, m, deterministic)
}
func (m *UnaryRangeExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnaryRangeExpr.Merge(m, src)
}
func (m *UnaryRangeExpr) XXX_Size() int {
	return xxx_messageInfo_UnaryRangeExpr.Size(m)
}
func (m *UnaryRangeExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_UnaryRangeExpr.DiscardUnknown(m)
}

var xxx_messageInfo_UnaryRangeExpr proto.InternalMessageInfo

func (m *UnaryRangeExpr) GetChild() *Expr {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *UnaryRangeExpr) GetOp() CompareOp {
	if m != nil {
		return m.Op
	}
	return CompareOp_InvalidCompareOp
}

func (m *UnaryRangeExpr) GetValue() *GenericValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type BinaryRangeExpr struct {
	Child                *Expr         `protobuf:"bytes,1,opt,name=child,proto3" json:"child,omitempty"`
	LowerInclusive       bool          `protobuf:"varint,2,opt,name=lower_inclusive,json=lowerInclusive,proto3" json:"lower_inclusive,omitempty"`
	UpperInclusive       bool          `protobuf:"varint,3,opt,name=upper_inclusive,json=upperInclusive,proto3" json:"upper_inclusive,omitempty"`
	LowerValue           *GenericValue `protobuf:"bytes,4,opt,name=lower_value,json=lowerValue,proto3" json:"lower_value,omitempty"`
	UpperValue           *GenericValue `protobuf:"bytes,5,opt,name=upper_value,json=upperValue,proto3" json:"upper_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *BinaryRangeExpr) Reset()         { *m = BinaryRangeExpr{} }
func (m *BinaryRangeExpr) String() string { return proto.CompactTextString(m) }
func (*BinaryRangeExpr) ProtoMessage()    {}
func (*BinaryRangeExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{9}
}

func (m *BinaryRangeExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BinaryRangeExpr.Unmarshal(m, b)
}
func (m *BinaryRangeExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BinaryRangeExpr.Marshal(b, m, deterministic)
}
func (m *BinaryRangeExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinaryRangeExpr.Merge(m, src)
}
func (m *BinaryRangeExpr) XXX_Size() int {
	return xxx_messageInfo_BinaryRangeExpr.Size(m)
}
func (m *BinaryRangeExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_BinaryRangeExpr.DiscardUnknown(m)
}

var xxx_messageInfo_BinaryRangeExpr proto.InternalMessageInfo

func (m *BinaryRangeExpr) GetChild() *Expr {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *BinaryRangeExpr) GetLowerInclusive() bool {
	if m != nil {
		return m.LowerInclusive
	}
	return false
}

func (m *BinaryRangeExpr) GetUpperInclusive() bool {
	if m != nil {
		return m.UpperInclusive
	}
	return false
}

func (m *BinaryRangeExpr) GetLowerValue() *GenericValue {
	if m != nil {
		return m.LowerValue
	}
	return nil
}

func (m *BinaryRangeExpr) GetUpperValue() *GenericValue {
	if m != nil {
		return m.UpperValue
	}
	return nil
}

type CompareExpr struct {
	Left                 *Expr     `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right                *Expr     `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
	Op                   CompareOp `protobuf:"varint,3,opt,name=op,proto3,enum=milvus.proto.plan.CompareOp" json:"op,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CompareExpr) Reset()         { *m = CompareExpr{} }
func (m *CompareExpr) String() string { return proto.CompactTextString(m) }
func (*CompareExpr) ProtoMessage()    {}
func (*CompareExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{10}
}

func (m *CompareExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompareExpr.Unmarshal(m, b)
}
func (m *CompareExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompareExpr.Marshal(b, m, deterministic)
}
func (m *CompareExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompareExpr.Merge(m, src)
}
func (m *CompareExpr) XXX_Size() int {
	return xxx_messageInfo_CompareExpr.Size(m)
}
func (m *CompareExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_CompareExpr.DiscardUnknown(m)
}

var xxx_messageInfo_CompareExpr proto.InternalMessageInfo

func (m *CompareExpr) GetLeft() *Expr {
	if m != nil {
		return m.Left
	}
	return nil
}

func (m *CompareExpr) GetRight() *Expr {
	if m != nil {
		return m.Right
	}
	return nil
}

func (m *CompareExpr) GetOp() CompareOp {
	if m != nil {
		return m.Op
	}
	return CompareOp_InvalidCompareOp
}

type TermExpr struct {
	Child                *Expr           `protobuf:"bytes,1,opt,name=child,proto3" json:"child,omitempty"`
	Values               []*GenericValue `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TermExpr) Reset()         { *m = TermExpr{} }
func (m *TermExpr) String() string { return proto.CompactTextString(m) }
func (*TermExpr) ProtoMessage()    {}
func (*TermExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{11}
}

func (m *TermExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TermExpr.Unmarshal(m, b)
}
func (m *TermExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TermExpr.Marshal(b, m, deterministic)
}
func (m *TermExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TermExpr.Merge(m, src)
}
func (m *TermExpr) XXX_Size() int {
	return xxx_messageInfo_TermExpr.Size(m)
}
func (m *TermExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_TermExpr.DiscardUnknown(m)
}

var xxx_messageInfo_TermExpr proto.InternalMessageInfo

func (m *TermExpr) GetChild() *Expr {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *TermExpr) GetValues() []*GenericValue {
	if m != nil {
		return m.Values
	}
	return nil
}

type UnaryLogicalExpr struct {
	Child                *Expr          `protobuf:"bytes,1,opt,name=child,proto3" json:"child,omitempty"`
	Op                   UnaryLogicalOp `protobuf:"varint,2,opt,name=op,proto3,enum=milvus.proto.plan.UnaryLogicalOp" json:"op,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UnaryLogicalExpr) Reset()         { *m = UnaryLogicalExpr{} }
func (m *UnaryLogicalExpr) String() string { return proto.CompactTextString(m) }
func (*UnaryLogicalExpr) ProtoMessage()    {}
func (*UnaryLogicalExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{12}
}

func (m *UnaryLogicalExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnaryLogicalExpr.Unmarshal(m, b)
}
func (m *UnaryLogicalExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnaryLogicalExpr.Marshal(b, m, deterministic)
}
func (m *UnaryLogicalExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnaryLogicalExpr.Merge(m, src)
}
func (m *UnaryLogicalExpr) XXX_Size() int {
	return xxx_messageInfo_UnaryLogicalExpr.Size(m)
}
func (m *UnaryLogicalExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_UnaryLogicalExpr.DiscardUnknown(m)
}

var xxx_messageInfo_UnaryLogicalExpr proto.InternalMessageInfo

func (m *UnaryLogicalExpr) GetChild() *Expr {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *UnaryLogicalExpr) GetOp() UnaryLogicalOp {
	if m != nil {
		return m.Op
	}
	return UnaryLogicalOp_InvalidUnaryLogicalOp
}

type BinaryLogicalExpr struct {
	Left                 *Expr           `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right                *Expr           `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
	Op                   BinaryLogicalOp `protobuf:"varint,3,opt,name=op,proto3,enum=milvus.proto.plan.BinaryLogicalOp" json:"op,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BinaryLogicalExpr) Reset()         { *m = BinaryLogicalExpr{} }
func (m *BinaryLogicalExpr) String() string { return proto.CompactTextString(m) }
func (*BinaryLogicalExpr) ProtoMessage()    {}
func (*BinaryLogicalExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{13}
}

func (m *BinaryLogicalExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BinaryLogicalExpr.Unmarshal(m, b)
}
func (m *BinaryLogicalExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BinaryLogicalExpr.Marshal(b, m, deterministic)
}
func (m *BinaryLogicalExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinaryLogicalExpr.Merge(m, src)
}
func (m *BinaryLogicalExpr) XXX_Size() int {
	return xxx_messageInfo_BinaryLogicalExpr.Size(m)
}
func (m *BinaryLogicalExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_BinaryLogicalExpr.DiscardUnknown(m)
}

var xxx_messageInfo_BinaryLogicalExpr proto.InternalMessageInfo

func (m *BinaryLogicalExpr) GetLeft() *Expr {
	if m != nil {
		return m.Left
	}
	return nil
}

func (m *BinaryLogicalExpr) GetRight() *Expr {
	if m != nil {
		return m.Right
	}
	return nil
}

func (m *BinaryLogicalExpr) GetOp() BinaryLogicalOp {
	if m != nil {
		return m.Op
	}
	return BinaryLogicalOp_InvalidBinaryLogicalOp
}

type Expr struct {
	// Types that are valid to be assigned to Expr:
	//	*Expr_TermExpr
	//	*Expr_CompareExpr
	//	*Expr_UnaryLogicalExpr
	//	*Expr_BinaryLogicalExpr
	//	*Expr_UnaryRangeExpr
	//	*Expr_BinaryRangeExpr
	//	*Expr_UnaryArithExpr
	//	*Expr_BinaryArithExpr
	//	*Expr_ValueExpr
	//	*Expr_ColumnExpr
	//	*Expr_CastExpr
	Expr                 isExpr_Expr `protobuf_oneof:"expr"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Expr) Reset()         { *m = Expr{} }
func (m *Expr) String() string { return proto.CompactTextString(m) }
func (*Expr) ProtoMessage()    {}
func (*Expr) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{14}
}

func (m *Expr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Expr.Unmarshal(m, b)
}
func (m *Expr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Expr.Marshal(b, m, deterministic)
}
func (m *Expr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expr.Merge(m, src)
}
func (m *Expr) XXX_Size() int {
	return xxx_messageInfo_Expr.Size(m)
}
func (m *Expr) XXX_DiscardUnknown() {
	xxx_messageInfo_Expr.DiscardUnknown(m)
}

var xxx_messageInfo_Expr proto.InternalMessageInfo

type isExpr_Expr interface {
	isExpr_Expr()
}

type Expr_TermExpr struct {
	TermExpr *TermExpr `protobuf:"bytes,1,opt,name=term_expr,json=termExpr,proto3,oneof"`
}

type Expr_CompareExpr struct {
	CompareExpr *CompareExpr `protobuf:"bytes,2,opt,name=compare_expr,json=compareExpr,proto3,oneof"`
}

type Expr_UnaryLogicalExpr struct {
	UnaryLogicalExpr *UnaryLogicalExpr `protobuf:"bytes,3,opt,name=unary_logical_expr,json=unaryLogicalExpr,proto3,oneof"`
}

type Expr_BinaryLogicalExpr struct {
	BinaryLogicalExpr *BinaryLogicalExpr `protobuf:"bytes,4,opt,name=binary_logical_expr,json=binaryLogicalExpr,proto3,oneof"`
}

type Expr_UnaryRangeExpr struct {
	UnaryRangeExpr *UnaryRangeExpr `protobuf:"bytes,5,opt,name=unary_range_expr,json=unaryRangeExpr,proto3,oneof"`
}

type Expr_BinaryRangeExpr struct {
	BinaryRangeExpr *BinaryRangeExpr `protobuf:"bytes,6,opt,name=binary_range_expr,json=binaryRangeExpr,proto3,oneof"`
}

type Expr_UnaryArithExpr struct {
	UnaryArithExpr *UnaryArithExpr `protobuf:"bytes,7,opt,name=unary_arith_expr,json=unaryArithExpr,proto3,oneof"`
}

type Expr_BinaryArithExpr struct {
	BinaryArithExpr *BinaryArithExpr `protobuf:"bytes,8,opt,name=binary_arith_expr,json=binaryArithExpr,proto3,oneof"`
}

type Expr_ValueExpr struct {
	ValueExpr *ValueExpr `protobuf:"bytes,9,opt,name=value_expr,json=valueExpr,proto3,oneof"`
}

type Expr_ColumnExpr struct {
	ColumnExpr *ColumnExpr `protobuf:"bytes,10,opt,name=column_expr,json=columnExpr,proto3,oneof"`
}

type Expr_CastExpr struct {
	CastExpr *CastExpr `protobuf:"bytes,11,opt,name=cast_expr,json=castExpr,proto3,oneof"`
}

func (*Expr_TermExpr) isExpr_Expr() {}

func (*Expr_CompareExpr) isExpr_Expr() {}

func (*Expr_UnaryLogicalExpr) isExpr_Expr() {}

func (*Expr_BinaryLogicalExpr) isExpr_Expr() {}

func (*Expr_UnaryRangeExpr) isExpr_Expr() {}

func (*Expr_BinaryRangeExpr) isExpr_Expr() {}

func (*Expr_UnaryArithExpr) isExpr_Expr() {}

func (*Expr_BinaryArithExpr) isExpr_Expr() {}

func (*Expr_ValueExpr) isExpr_Expr() {}

func (*Expr_ColumnExpr) isExpr_Expr() {}

func (*Expr_CastExpr) isExpr_Expr() {}

func (m *Expr) GetExpr() isExpr_Expr {
	if m != nil {
		return m.Expr
	}
	return nil
}

func (m *Expr) GetTermExpr() *TermExpr {
	if x, ok := m.GetExpr().(*Expr_TermExpr); ok {
		return x.TermExpr
	}
	return nil
}

func (m *Expr) GetCompareExpr() *CompareExpr {
	if x, ok := m.GetExpr().(*Expr_CompareExpr); ok {
		return x.CompareExpr
	}
	return nil
}

func (m *Expr) GetUnaryLogicalExpr() *UnaryLogicalExpr {
	if x, ok := m.GetExpr().(*Expr_UnaryLogicalExpr); ok {
		return x.UnaryLogicalExpr
	}
	return nil
}

func (m *Expr) GetBinaryLogicalExpr() *BinaryLogicalExpr {
	if x, ok := m.GetExpr().(*Expr_BinaryLogicalExpr); ok {
		return x.BinaryLogicalExpr
	}
	return nil
}

func (m *Expr) GetUnaryRangeExpr() *UnaryRangeExpr {
	if x, ok := m.GetExpr().(*Expr_UnaryRangeExpr); ok {
		return x.UnaryRangeExpr
	}
	return nil
}

func (m *Expr) GetBinaryRangeExpr() *BinaryRangeExpr {
	if x, ok := m.GetExpr().(*Expr_BinaryRangeExpr); ok {
		return x.BinaryRangeExpr
	}
	return nil
}

func (m *Expr) GetUnaryArithExpr() *UnaryArithExpr {
	if x, ok := m.GetExpr().(*Expr_UnaryArithExpr); ok {
		return x.UnaryArithExpr
	}
	return nil
}

func (m *Expr) GetBinaryArithExpr() *BinaryArithExpr {
	if x, ok := m.GetExpr().(*Expr_BinaryArithExpr); ok {
		return x.BinaryArithExpr
	}
	return nil
}

func (m *Expr) GetValueExpr() *ValueExpr {
	if x, ok := m.GetExpr().(*Expr_ValueExpr); ok {
		return x.ValueExpr
	}
	return nil
}

func (m *Expr) GetColumnExpr() *ColumnExpr {
	if x, ok := m.GetExpr().(*Expr_ColumnExpr); ok {
		return x.ColumnExpr
	}
	return nil
}

func (m *Expr) GetCastExpr() *CastExpr {
	if x, ok := m.GetExpr().(*Expr_CastExpr); ok {
		return x.CastExpr
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Expr) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Expr_TermExpr)(nil),
		(*Expr_CompareExpr)(nil),
		(*Expr_UnaryLogicalExpr)(nil),
		(*Expr_BinaryLogicalExpr)(nil),
		(*Expr_UnaryRangeExpr)(nil),
		(*Expr_BinaryRangeExpr)(nil),
		(*Expr_UnaryArithExpr)(nil),
		(*Expr_BinaryArithExpr)(nil),
		(*Expr_ValueExpr)(nil),
		(*Expr_ColumnExpr)(nil),
		(*Expr_CastExpr)(nil),
	}
}

type VectorANNS struct {
	IsBinary             bool       `protobuf:"varint,1,opt,name=is_binary,json=isBinary,proto3" json:"is_binary,omitempty"`
	FieldId              int64      `protobuf:"varint,2,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	Predicates           *Expr      `protobuf:"bytes,3,opt,name=predicates,proto3" json:"predicates,omitempty"`
	QueryInfo            *QueryInfo `protobuf:"bytes,4,opt,name=query_info,json=queryInfo,proto3" json:"query_info,omitempty"`
	PlaceholderTag       string     `protobuf:"bytes,5,opt,name=placeholder_tag,json=placeholderTag,proto3" json:"placeholder_tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *VectorANNS) Reset()         { *m = VectorANNS{} }
func (m *VectorANNS) String() string { return proto.CompactTextString(m) }
func (*VectorANNS) ProtoMessage()    {}
func (*VectorANNS) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{15}
}

func (m *VectorANNS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorANNS.Unmarshal(m, b)
}
func (m *VectorANNS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorANNS.Marshal(b, m, deterministic)
}
func (m *VectorANNS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorANNS.Merge(m, src)
}
func (m *VectorANNS) XXX_Size() int {
	return xxx_messageInfo_VectorANNS.Size(m)
}
func (m *VectorANNS) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorANNS.DiscardUnknown(m)
}

var xxx_messageInfo_VectorANNS proto.InternalMessageInfo

func (m *VectorANNS) GetIsBinary() bool {
	if m != nil {
		return m.IsBinary
	}
	return false
}

func (m *VectorANNS) GetFieldId() int64 {
	if m != nil {
		return m.FieldId
	}
	return 0
}

func (m *VectorANNS) GetPredicates() *Expr {
	if m != nil {
		return m.Predicates
	}
	return nil
}

func (m *VectorANNS) GetQueryInfo() *QueryInfo {
	if m != nil {
		return m.QueryInfo
	}
	return nil
}

func (m *VectorANNS) GetPlaceholderTag() string {
	if m != nil {
		return m.PlaceholderTag
	}
	return ""
}

type PlanNode struct {
	// Types that are valid to be assigned to Node:
	//	*PlanNode_VectorAnns
	//	*PlanNode_Predicates
	Node                 isPlanNode_Node `protobuf_oneof:"node"`
	OutputFieldIds       []int64         `protobuf:"varint,3,rep,packed,name=output_field_ids,json=outputFieldIds,proto3" json:"output_field_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PlanNode) Reset()         { *m = PlanNode{} }
func (m *PlanNode) String() string { return proto.CompactTextString(m) }
func (*PlanNode) ProtoMessage()    {}
func (*PlanNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d655ab2f7683c23, []int{16}
}

func (m *PlanNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlanNode.Unmarshal(m, b)
}
func (m *PlanNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlanNode.Marshal(b, m, deterministic)
}
func (m *PlanNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlanNode.Merge(m, src)
}
func (m *PlanNode) XXX_Size() int {
	return xxx_messageInfo_PlanNode.Size(m)
}
func (m *PlanNode) XXX_DiscardUnknown() {
	xxx_messageInfo_PlanNode.DiscardUnknown(m)
}

var xxx_messageInfo_PlanNode proto.InternalMessageInfo

type isPlanNode_Node interface {
	isPlanNode_Node()
}

type PlanNode_VectorAnns struct {
	VectorAnns *VectorANNS `protobuf:"bytes,1,opt,name=vector_anns,json=vectorAnns,proto3,oneof"`
}

type PlanNode_Predicates struct {
	Predicates *Expr `protobuf:"bytes,2,opt,name=predicates,proto3,oneof"`
}

func (*PlanNode_VectorAnns) isPlanNode_Node() {}

func (*PlanNode_Predicates) isPlanNode_Node() {}

func (m *PlanNode) GetNode() isPlanNode_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *PlanNode) GetVectorAnns() *VectorANNS {
	if x, ok := m.GetNode().(*PlanNode_VectorAnns); ok {
		return x.VectorAnns
	}
	return nil
}

func (m *PlanNode) GetPredicates() *Expr {
	if x, ok := m.GetNode().(*PlanNode_Predicates); ok {
		return x.Predicates
	}
	return nil
}

func (m *PlanNode) GetOutputFieldIds() []int64 {
	if m != nil {
		return m.OutputFieldIds
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PlanNode) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PlanNode_VectorAnns)(nil),
		(*PlanNode_Predicates)(nil),
	}
}

func init() {
	proto.RegisterEnum("milvus.proto.plan.UnaryLogicalOp", UnaryLogicalOp_name, UnaryLogicalOp_value)
	proto.RegisterEnum("milvus.proto.plan.BinaryLogicalOp", BinaryLogicalOp_name, BinaryLogicalOp_value)
	proto.RegisterEnum("milvus.proto.plan.CompareOp", CompareOp_name, CompareOp_value)
	proto.RegisterEnum("milvus.proto.plan.UnaryArithOp", UnaryArithOp_name, UnaryArithOp_value)
	proto.RegisterEnum("milvus.proto.plan.BinaryArithOp", BinaryArithOp_name, BinaryArithOp_value)
	proto.RegisterType((*GenericValue)(nil), "milvus.proto.plan.GenericValue")
	proto.RegisterType((*QueryInfo)(nil), "milvus.proto.plan.QueryInfo")
	proto.RegisterType((*ColumnInfo)(nil), "milvus.proto.plan.ColumnInfo")
	proto.RegisterType((*ValueExpr)(nil), "milvus.proto.plan.ValueExpr")
	proto.RegisterType((*ColumnExpr)(nil), "milvus.proto.plan.ColumnExpr")
	proto.RegisterType((*CastExpr)(nil), "milvus.proto.plan.CastExpr")
	proto.RegisterType((*UnaryArithExpr)(nil), "milvus.proto.plan.UnaryArithExpr")
	proto.RegisterType((*BinaryArithExpr)(nil), "milvus.proto.plan.BinaryArithExpr")
	proto.RegisterType((*UnaryRangeExpr)(nil), "milvus.proto.plan.UnaryRangeExpr")
	proto.RegisterType((*BinaryRangeExpr)(nil), "milvus.proto.plan.BinaryRangeExpr")
	proto.RegisterType((*CompareExpr)(nil), "milvus.proto.plan.CompareExpr")
	proto.RegisterType((*TermExpr)(nil), "milvus.proto.plan.TermExpr")
	proto.RegisterType((*UnaryLogicalExpr)(nil), "milvus.proto.plan.UnaryLogicalExpr")
	proto.RegisterType((*BinaryLogicalExpr)(nil), "milvus.proto.plan.BinaryLogicalExpr")
	proto.RegisterType((*Expr)(nil), "milvus.proto.plan.Expr")
	proto.RegisterType((*VectorANNS)(nil), "milvus.proto.plan.VectorANNS")
	proto.RegisterType((*PlanNode)(nil), "milvus.proto.plan.PlanNode")
}

func init() { proto.RegisterFile("plan.proto", fileDescriptor_2d655ab2f7683c23) }

var fileDescriptor_2d655ab2f7683c23 = []byte{
	// 1337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x5d, 0x73, 0x1b, 0x35,
	0x17, 0xf6, 0xfa, 0x2b, 0xbb, 0xc7, 0xae, 0xb3, 0x55, 0xfb, 0xbe, 0x4d, 0x5b, 0x4a, 0xc3, 0xb6,
	0x33, 0xcd, 0x84, 0x36, 0xa1, 0x1f, 0xd0, 0xa1, 0x0c, 0x9d, 0xc6, 0x6d, 0x69, 0x32, 0x24, 0x69,
	0xd8, 0x84, 0x0c, 0xc3, 0xcd, 0x8e, 0xbc, 0x2b, 0xc7, 0x9a, 0xae, 0x57, 0x5b, 0xad, 0xd6, 0xd4,
	0xfc, 0x10, 0xb8, 0xe4, 0x02, 0x86, 0x3f, 0xc0, 0x15, 0xc3, 0xcf, 0xe1, 0x8f, 0x30, 0xfa, 0xb0,
	0xbd, 0x6e, 0xed, 0x24, 0x84, 0xe9, 0x9d, 0x74, 0x74, 0xf4, 0x9c, 0x47, 0xcf, 0x39, 0x92, 0x0e,
	0x40, 0x1a, 0xe3, 0x64, 0x2d, 0xe5, 0x4c, 0x30, 0x74, 0xbe, 0x4f, 0xe3, 0x41, 0x9e, 0xe9, 0xd9,
	0x9a, 0x5c, 0xb8, 0xd2, 0xcc, 0xc2, 0x1e, 0xe9, 0x63, 0x6d, 0xf2, 0x52, 0x68, 0xbe, 0x20, 0x09,
	0xe1, 0x34, 0x3c, 0xc4, 0x71, 0x4e, 0xd0, 0x55, 0xb0, 0x3b, 0x8c, 0xc5, 0xc1, 0x00, 0xc7, 0x4b,
	0xd6, 0xb2, 0xb5, 0x62, 0x6f, 0x96, 0xfc, 0x05, 0x69, 0x39, 0xc4, 0x31, 0xba, 0x06, 0x0e, 0x4d,
	0xc4, 0x67, 0x0f, 0xd4, 0x6a, 0x79, 0xd9, 0x5a, 0xa9, 0x6c, 0x96, 0x7c, 0x5b, 0x99, 0xcc, 0x72,
	0x37, 0x66, 0x58, 0xa8, 0xe5, 0xca, 0xb2, 0xb5, 0x62, 0xc9, 0x65, 0x65, 0x3a, 0xc4, 0x71, 0xbb,
	0x06, 0x95, 0x01, 0x8e, 0x3d, 0x02, 0xce, 0x37, 0x39, 0xe1, 0xc3, 0xad, 0xa4, 0xcb, 0x10, 0x82,
	0xaa, 0x60, 0xe9, 0x2b, 0x15, 0xaa, 0xe2, 0xab, 0x31, 0xba, 0x0e, 0x8d, 0x3e, 0x11, 0x9c, 0x86,
	0x81, 0x18, 0xa6, 0x44, 0x01, 0x39, 0x3e, 0x68, 0xd3, 0xc1, 0x30, 0x25, 0xe8, 0x06, 0x9c, 0xcb,
	0x08, 0xe6, 0x61, 0x2f, 0x48, 0x31, 0xc7, 0xfd, 0x6c, 0xa9, 0xaa, 0x5c, 0x9a, 0xda, 0xb8, 0xa7,
	0x6c, 0xde, 0xef, 0x16, 0xc0, 0x53, 0x16, 0xe7, 0xfd, 0x44, 0x05, 0xba, 0x0c, 0x76, 0x97, 0x92,
	0x38, 0x0a, 0x68, 0x64, 0x82, 0x2d, 0xa8, 0xf9, 0x56, 0x84, 0x1e, 0x81, 0x13, 0x61, 0x81, 0x75,
	0x34, 0x79, 0xaa, 0xd6, 0xbd, 0x6b, 0x6b, 0x53, 0xba, 0x19, 0xc5, 0x9e, 0x61, 0x81, 0x25, 0x01,
	0xdf, 0x8e, 0xcc, 0x08, 0xdd, 0x84, 0x16, 0xcd, 0x82, 0x94, 0xd3, 0x3e, 0xe6, 0xc3, 0xe0, 0x15,
	0x19, 0x2a, 0xba, 0xb6, 0xdf, 0xa4, 0xd9, 0x9e, 0x36, 0x7e, 0x4d, 0x86, 0xe8, 0x2a, 0x38, 0x34,
	0x0b, 0x70, 0x2e, 0xd8, 0xd6, 0x33, 0x45, 0xd6, 0xf6, 0x6d, 0x9a, 0x6d, 0xa8, 0xb9, 0xd7, 0x06,
	0x47, 0x49, 0xff, 0xfc, 0x4d, 0xca, 0xd1, 0xa7, 0x50, 0x1b, 0xc8, 0x89, 0xe2, 0xd8, 0xb8, 0x77,
	0x7d, 0xed, 0x9d, 0xfc, 0xad, 0x15, 0xd3, 0xe5, 0x6b, 0x6f, 0x6f, 0x7b, 0x74, 0x56, 0x05, 0xf2,
	0x18, 0x1a, 0xa1, 0x9a, 0x05, 0x34, 0xe9, 0x32, 0x03, 0x75, 0x6d, 0x06, 0xd4, 0x44, 0x1f, 0x1f,
	0xc2, 0xf1, 0xd8, 0xcb, 0xc1, 0x7e, 0x8a, 0x33, 0xa1, 0xb0, 0xee, 0x40, 0x2d, 0xec, 0xd1, 0x38,
	0x32, 0x28, 0x97, 0x66, 0xa0, 0x48, 0x3f, 0x5f, 0x7b, 0xfd, 0x17, 0x2d, 0xbd, 0x14, 0x5a, 0xdf,
	0x26, 0x98, 0x0f, 0x37, 0x38, 0x15, 0xbd, 0xb3, 0x04, 0x5f, 0x87, 0x32, 0x4b, 0x4d, 0xd4, 0x59,
	0xca, 0x4d, 0xd0, 0x5f, 0xa6, 0x7e, 0x99, 0xa5, 0xde, 0x2f, 0x16, 0x2c, 0xb6, 0xe9, 0x74, 0xcc,
	0x8f, 0xa1, 0x1a, 0x93, 0xae, 0x38, 0x29, 0xa4, 0x72, 0x92, 0x04, 0x39, 0x3d, 0xea, 0x09, 0x15,
	0xf4, 0x38, 0x82, 0xca, 0x0b, 0x7d, 0xa2, 0x08, 0x56, 0x14, 0xc1, 0xe5, 0x19, 0xbe, 0x05, 0x2e,
	0x86, 0xe1, 0x6f, 0x96, 0x11, 0xc5, 0xc7, 0xc9, 0x11, 0x39, 0x8b, 0x28, 0xb7, 0x0b, 0xa2, 0x7c,
	0x30, 0xb3, 0x06, 0xfa, 0x29, 0xe6, 0x44, 0xc7, 0x9b, 0xd4, 0x5f, 0xe5, 0x5f, 0xd5, 0xdf, 0x4f,
	0xe5, 0x91, 0x90, 0x67, 0xe6, 0x79, 0x0b, 0x16, 0x63, 0xf6, 0x03, 0xe1, 0x01, 0x4d, 0xc2, 0x38,
	0xcf, 0xe8, 0x40, 0xd7, 0x8f, 0xed, 0xb7, 0x94, 0x79, 0x6b, 0x64, 0x95, 0x8e, 0x79, 0x9a, 0x4e,
	0x39, 0xea, 0x3b, 0xd7, 0x52, 0xe6, 0x89, 0xe3, 0x13, 0x68, 0x68, 0x44, 0x7d, 0xa2, 0xea, 0xe9,
	0x4e, 0x04, 0x6a, 0x8f, 0x7e, 0x0c, 0x9f, 0x40, 0x43, 0x87, 0xd2, 0x08, 0xb5, 0x53, 0x22, 0xa8,
	0x3d, 0x6a, 0xec, 0xfd, 0x6c, 0x41, 0xc3, 0x28, 0xfc, 0xde, 0xab, 0xeb, 0x76, 0xa1, 0xba, 0x4e,
	0xcc, 0xb4, 0xc7, 0xc1, 0x3e, 0x20, 0xbc, 0x7f, 0x96, 0x54, 0x3d, 0x84, 0xba, 0x12, 0x24, 0x5b,
	0x2a, 0x2f, 0x57, 0x4e, 0xa3, 0x88, 0x71, 0xf7, 0x04, 0xb8, 0xaa, 0x98, 0xb7, 0xd9, 0x11, 0x0d,
	0x71, 0x7c, 0x96, 0xd8, 0x77, 0x0b, 0xe5, 0xfc, 0xd1, 0xbc, 0x3b, 0x6e, 0xf0, 0xcd, 0x49, 0x7f,
	0xb5, 0xe0, 0xbc, 0x2e, 0xce, 0x62, 0xdc, 0xf7, 0x99, 0x89, 0x7b, 0x85, 0x4c, 0x78, 0x73, 0xef,
	0xf9, 0x34, 0xcb, 0xbf, 0xea, 0x50, 0x55, 0xc4, 0x1e, 0x81, 0x23, 0x08, 0xef, 0x07, 0xe4, 0x4d,
	0xca, 0x0d, 0xbb, 0xab, 0x33, 0x30, 0x46, 0xc9, 0x93, 0x5f, 0xac, 0x18, 0x25, 0xf2, 0x29, 0x34,
	0x43, 0x9d, 0x65, 0xbd, 0x5d, 0xd3, 0xfd, 0x70, 0x7e, 0x31, 0x18, 0x84, 0x46, 0x58, 0xa8, 0xd1,
	0x7d, 0x40, 0xb9, 0xe4, 0x17, 0xc4, 0x9a, 0xa0, 0x86, 0xd2, 0x0f, 0xc2, 0x8d, 0x13, 0x24, 0x37,
	0x78, 0x6e, 0xfe, 0xb6, 0xdc, 0x87, 0x70, 0xa1, 0x43, 0xdf, 0x45, 0xd5, 0x97, 0xf2, 0xe6, 0x49,
	0x1a, 0x19, 0xd8, 0xf3, 0x9d, 0x77, 0xd2, 0xb8, 0x03, 0x3a, 0x56, 0xc0, 0xe5, 0xc3, 0xa3, 0x41,
	0xf5, 0x3d, 0x9d, 0x5b, 0x1d, 0xe3, 0x27, 0x6a, 0xb3, 0xe4, 0xb7, 0xf2, 0xe9, 0x47, 0x6b, 0x0f,
	0x4c, 0x8c, 0x22, 0x5e, 0x5d, 0xe1, 0xcd, 0x4f, 0x64, 0x11, 0x70, 0xb1, 0xf3, 0xd6, 0x33, 0x38,
	0x26, 0x88, 0xe5, 0xb3, 0xae, 0x01, 0x17, 0x8e, 0x27, 0x38, 0xfe, 0x8c, 0xc6, 0x04, 0x27, 0xdf,
	0xd3, 0x84, 0x60, 0x01, 0xcf, 0x3e, 0x81, 0x60, 0x11, 0xd0, 0x10, 0x9c, 0x20, 0x7e, 0x09, 0xa0,
	0xae, 0xa7, 0x86, 0x72, 0x14, 0xd4, 0xac, 0xe7, 0x63, 0xdc, 0xa4, 0x6c, 0x96, 0x7c, 0x67, 0x30,
	0xee, 0x58, 0x9e, 0x8c, 0x9b, 0x0d, 0xb5, 0x1f, 0x4e, 0x68, 0x36, 0x0c, 0x80, 0x69, 0x37, 0x46,
	0x05, 0x1f, 0xe2, 0x4c, 0xe8, 0xfd, 0x8d, 0xb9, 0x05, 0x3f, 0x6a, 0x49, 0x64, 0xc1, 0x87, 0x66,
	0xdc, 0xae, 0x43, 0x55, 0x6e, 0xf3, 0xfe, 0xb6, 0x00, 0x0e, 0x49, 0x28, 0x18, 0xdf, 0xd8, 0xdd,
	0xdd, 0x37, 0x0d, 0x97, 0x3e, 0xa9, 0x6e, 0x63, 0x65, 0xc3, 0xa5, 0xc5, 0x98, 0x6a, 0x05, 0xcb,
	0xd3, 0xad, 0xe0, 0x43, 0x80, 0x94, 0x93, 0x88, 0x86, 0x58, 0x90, 0xcc, 0x94, 0xfc, 0xdc, 0xcb,
	0x5e, 0x70, 0x45, 0x5f, 0x00, 0xbc, 0x96, 0x4d, 0xad, 0xee, 0xb8, 0xaa, 0x73, 0x45, 0x1c, 0x77,
	0xbe, 0xbe, 0xf3, 0x7a, 0xdc, 0x04, 0xdf, 0x82, 0xc5, 0x34, 0xc6, 0x21, 0xe9, 0xb1, 0x38, 0x22,
	0x3c, 0x10, 0xf8, 0x48, 0x95, 0xb0, 0xe3, 0xb7, 0x0a, 0xe6, 0x03, 0x7c, 0xe4, 0xfd, 0x69, 0x81,
	0xbd, 0x17, 0xe3, 0x64, 0x97, 0x45, 0xea, 0x73, 0x1a, 0xa8, 0x13, 0x07, 0x38, 0x49, 0xb2, 0x63,
	0xba, 0xbc, 0x89, 0x2e, 0x52, 0x78, 0xbd, 0x67, 0x23, 0x49, 0x32, 0xf4, 0xf9, 0xd4, 0x69, 0x8f,
	0x7f, 0xda, 0xe4, 0xd6, 0xc2, 0x79, 0x57, 0xc0, 0x65, 0xb9, 0x48, 0x73, 0x11, 0x8c, 0xa4, 0x94,
	0x72, 0x55, 0x56, 0x2a, 0x7e, 0x4b, 0xdb, 0xbf, 0xd2, 0x8a, 0x66, 0x32, 0x43, 0x09, 0x8b, 0xc8,
	0xea, 0x03, 0xd3, 0xc8, 0x8c, 0x5f, 0x3d, 0x74, 0x19, 0xfe, 0xb7, 0x95, 0x0c, 0x70, 0x4c, 0xa3,
	0xe9, 0x05, 0xb7, 0x84, 0x16, 0xa0, 0xb2, 0xcb, 0x84, 0x6b, 0xad, 0x6e, 0x8f, 0xfa, 0x8a, 0xc9,
	0xb6, 0x2b, 0xf0, 0x7f, 0xb3, 0xed, 0xad, 0x15, 0xb7, 0x84, 0x5a, 0x00, 0x66, 0xba, 0x91, 0x44,
	0xae, 0x85, 0xce, 0x81, 0x33, 0x5a, 0xe6, 0x6e, 0x79, 0xf5, 0x47, 0x70, 0xc6, 0x9f, 0x20, 0xba,
	0x08, 0xae, 0xc1, 0x19, 0xdb, 0xdc, 0x12, 0x5a, 0x84, 0xc6, 0x0b, 0x4e, 0xb0, 0x20, 0xfc, 0xa0,
	0x87, 0x13, 0xd7, 0x42, 0x2e, 0x34, 0x8d, 0xe1, 0xf9, 0xeb, 0x1c, 0xc7, 0x6e, 0x19, 0x35, 0xc1,
	0xde, 0x26, 0x59, 0xa6, 0xd6, 0x2b, 0x2a, 0x04, 0xc9, 0x32, 0xbd, 0x58, 0x45, 0x0e, 0xd4, 0xf4,
	0xb0, 0x26, 0xfd, 0x76, 0x99, 0xd0, 0xb3, 0xfa, 0xea, 0x63, 0x68, 0x16, 0xfb, 0x4f, 0x74, 0x09,
	0x2e, 0x14, 0x4f, 0x6f, 0xcc, 0x6e, 0x49, 0x22, 0xec, 0xd0, 0x24, 0xcf, 0x5c, 0x0b, 0x01, 0xd4,
	0xdb, 0x54, 0x48, 0x25, 0xca, 0xab, 0x7f, 0x58, 0x70, 0x6e, 0xaa, 0x3f, 0x44, 0x4b, 0x70, 0x71,
	0x4a, 0x88, 0x09, 0xc4, 0x02, 0x54, 0x36, 0x22, 0x79, 0xfe, 0x26, 0xd8, 0xfb, 0x79, 0x47, 0x70,
	0x1c, 0x0a, 0x4d, 0x7c, 0x27, 0x8f, 0x05, 0x4d, 0xe3, 0xa1, 0x5b, 0x91, 0xe0, 0xcf, 0xe8, 0x80,
	0x46, 0xc4, 0xad, 0xca, 0xf1, 0x0e, 0x8b, 0xf2, 0x98, 0xb9, 0x35, 0x19, 0x7f, 0x4f, 0xb6, 0x40,
	0x6e, 0xdd, 0xc4, 0x97, 0x52, 0x2e, 0x48, 0x73, 0x9b, 0x8a, 0x97, 0xdc, 0xb5, 0x8d, 0xf9, 0x3b,
	0xc6, 0x5d, 0x47, 0x1e, 0x7f, 0xbf, 0x47, 0xbb, 0x62, 0x9b, 0x74, 0x85, 0x0b, 0x32, 0x01, 0x6a,
	0xea, 0xcb, 0x7f, 0xd0, 0x6d, 0xb4, 0xef, 0x7f, 0x7f, 0xf7, 0x88, 0x8a, 0x5e, 0xde, 0x59, 0x0b,
	0x59, 0x7f, 0x5d, 0x97, 0xd6, 0x1d, 0xca, 0xcc, 0x68, 0x9d, 0x26, 0x82, 0xf0, 0x04, 0xc7, 0xeb,
	0xaa, 0xda, 0xd6, 0x65, 0xb5, 0xa5, 0x9d, 0x4e, 0x5d, 0xcd, 0xee, 0xff, 0x13, 0x00, 0x00, 0xff,
	0xff, 0x05, 0xca, 0xfb, 0xc4, 0xc9, 0x0e, 0x00, 0x00,
}
